import Head from "next/head";
import MainLayout from "@/components/common/layouts/MainLayout";
import useFetchApiItems from "@/hooks/useFetchApiItems";

export default function Dashboard() {
  let user = null;
  if (typeof window !== "undefined") {
    user = localStorage.getItem("user");
    user = user ? JSON.parse(user) : null;
  }
  console.log("user", user);
  const [restaurants, isresLoading, refetchres] = useFetchApiItems(
    `/restaurants?filters[users][documentId][$eq]=${user?.documentId}`
  );
  console.log("restaurants", restaurants);
  const foundRestaurant = restaurants[0] ?? null;

  const handleCategories = (res) => {
    if (res?.documentId) {
      console.log("dsd", res.documentId);
      const values = {
        data: {
          name: "Tapichka",
          description: "kalish",
          internalName: "Asliddin_meet",
          restaurant: res.documentId,
        },
      };

      const options = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      };

      fetch("http://192.168.100.84:1337/api/categories", options)
        .then((response) => response.json())
        .then((res) => {
          console.log(res);
        })
        .catch((error) => console.error(error));
    }
  };

  const [categories, isLoading] = useFetchApiItems(
    `/categories?filters[restaurant][documentId][$eqi]=${foundRestaurant?.documentId}`
  );

  const handletype = (cats) => {
    const [cat] = cats;
    if (cat.documentId) {
      const values = {
        data: {
          name: "kalish",
          category: cat.documentId,
        },
      };

      const options = {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      };

      fetch("http://192.168.100.84:1337/api/types", options)
        .then((response) => response.json())
        .then((res) => {
          console.log(res);
        })
        .catch((error) => console.error(error));
    }
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <button
          onClick={() => {
            handleCategories(foundRestaurant);
          }}
        >
          Categories
        </button>
        <button
          onClick={() => {
            handletype(categories);
          }}
        >
          type
        </button>
      </div>
    </>
  );
}

Dashboard.getLayout = (pageProps) => (
  <MainLayout>
    <Dashboard {...pageProps} />
  </MainLayout>
);
